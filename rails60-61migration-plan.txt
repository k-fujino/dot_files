# Rails 6.0.2 → Rails 6.1 移行作業計画（4営業日）

## Day 1: 準備・調査・環境構築

### 午前（09:00-12:00）
**1. 現状把握と依存関係調査**
- [ ] `bundle outdated`でgem更新状況確認
- [ ] Rails 6.1非対応gemの特定
- [ ] `inherited_resources`など問題のあるgemのリストアップ
- [ ] カスタムgemやforkしたgemの確認

**2. テストカバレッジ確認**
- [ ] `rails test`で現在のテスト状況確認
- [ ] テストカバレッジレポート生成
- [ ] 重要なビジネスロジックのテスト追加（必要に応じて）

### 午後（13:00-18:00）
**3. デュアルブート環境構築**
```bash
# next_rails gemの追加
echo 'gem "next_rails"' >> Gemfile
bundle install

# Rails 6.1用Gemfile作成
bundle exec next_rails init
```

**4. Gemfile更新計画策定**
- [ ] Rails 6.1対応のgem版本調査
- [ ] アップデート順序の決定
- [ ] リスクの高いgemの代替案検討

### 成果物
- [ ] gem互換性調査レポート
- [ ] デュアルブート環境
- [ ] テストカバレッジレポート

---

## Day 2: Rails 6.1アップグレード実施

### 午前（09:00-12:00）
**1. Rails 6.1へのアップグレード**
```bash
# Gemfile.next.lockファイルでRails 6.1を試行
echo 'gem "rails", "~> 6.1.0"' >> Gemfile.next
bundle install
```

**2. 設定ファイル更新**
```bash
# Rails設定の更新
BUNDLE_GEMFILE=Gemfile.next rails app:update
```

**3. 新機能対応（必要に応じて）**
- [ ] Zeitwerkオートローダー設定確認
- [ ] `config.load_defaults 6.1`の適用検討

### 午後（13:00-18:00）
**4. エラー修正とコード調整**
- [ ] 非推奨警告の修正
- [ ] `belongs_to`オプション必須化対応
- [ ] ActiveStorageの変更点対応

**5. カスタムコード調整**
- [ ] ApplicationControllerの調整確認
- [ ] UsersControllerの動作確認
- [ ] 他のinherited_resources使用コントローラーの修正

### 成果物
- [ ] Rails 6.1動作環境
- [ ] 新されたGemfile.next
- [ ] 初期エラー修正完了

---

## Day 3: テスト実行・問題修正・最適化

### 午前（09:00-12:00）
**1. 全テスト実行と問題修正**
```bash
# Rails 6.1環境でのテスト実行
BUNDLE_GEMFILE=Gemfile.next rails test

# システムテスト実行
BUNDLE_GEMFILE=Gemfile.next rails test:system
```

**2. テスト失敗の修正**
- [ ] UsersControllerテストの調整
- [ ] inherited_resources依存テストの修正
- [ ] モデルテストの調整

### 午後（13:00-18:00）
**3. 機能テストと統合テスト**
- [ ] 認証システム（Authenticatable）の動作確認
- [ ] 認可システム（Banken）の動作確認
- [ ] PaperTrailの動作確認
- [ ] Sidekiqの動作確認

**4. パフォーマンステスト**
- [ ] アプリケーション起動時間測定
- [ ] 主要エンドポイントのレスポンス時間確認
- [ ] メモリ使用量の確認

### 成果物
- [ ] 全テスト通過
- [ ] パフォーマンステスト果
- [ ] 機能動作確認完了

---

## Day 4: 最終検証・CI/CD更新・本番準備

### 午前（09:00-12:00）
**1. 最終テストと検証**
- [ ] プロダクションシミュレーション環境でのテスト
- [ ] アセットコンパイルの確認
- [ ] データベース操作の確認
- [ ] 外部API連携の確認

**2. CI/CD環境更新**
- [ ] GitHub Actions/CircleCIの設定更新
- [ ] Docker imageの更新（使用している場合）
- [ ] デプロイスクリプトの調整

### 午後（13:00-18:00）
**3. ドキュメント更新と引き継ぎ準備**
- [ ] README.mdの更新
- [ ] 変更点まとめ作成
- [ ] 次段階（Rails 7.0移行）の準備資料作成

**4. 本番環境移行準備**
- [ ] ステージング環境での最終確認
- [ ] ロールバック手順の確認
- [ ] 監視設定の調整

### 成果物
- [ ] Rails 6.1完全移行完了
- [ ] CI/CD更新完了
- [ ] 次段階移行準備完了

---

## 各日の重要チェックポイント

### Day 1 終了時
- ✅ デュアルブート環境が正常動作
- ✅ 現在のテストが全て通過
- ✅ 問題のあるgemを特定済み

### Day 2 終了時
- ✅ Rails 6.1でアプリケーションが起動
- ✅ 主要機能が動作（エラーは残っていてもOK）
- ✅ 重大な互換性問題を把握済み

### Day 3 終了時
- ✅ 全テストが通過
- ✅ 主要機能が正常動作
- ✅ パフォーマンス劣化なし

### Day 4 終了時
- ✅ 本番環境移行準備完了
- ✅ チーム引き継ぎ資料完成
- ✅ ロールバック手順確立

---

## リスク管理

### 高リスク項目
1. **inherited_resources完全除去**
   - 対策: Day 1で全対象コントローラーをリストアップ
   - 時間配分: Day 2で集中対応

2. **ActiveRecord関連の破綻変更**
   - 対策: モデルテストを重点的に実行
   - 時間配分: Day 3で徹底検証

3. **認証・認可システムの問題**
   - 対策: Day 3で機能テストを重点実施
   - 時間配分: 問題発生時は即座に対応

### 緊急時対応
- 各日終了時にスナップショット取得
- 問題発生時は前日の状態にロールバック
- 4日で完了困難な場合は段階的リリース検討

---

## 次段階準備（Rails 7.0移行）

### Day 4で準備する項目
- [ ] Rails 7.0での主要変更点調査
- [ ] Turbo/Stimulus導入計画
- [ ] Import maps移行準備
- [ ] Node.js依存関係除去計画

この計画で Rails 6.1 移行を確実に4営業日で完了させ、次のRails 7.0移行への準備も整えます。
